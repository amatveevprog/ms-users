{"version":3,"sources":["updateMetadata.js"],"names":[],"mappings":"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","file":"updateMetadata-compiled.js","sourcesContent":["/* global inspectPromise */\r\nconst { expect } = require('chai');\r\n\r\ndescribe('#updateMetadata', function getMetadataSuite() {\r\n  const headers = { routingKey: 'users.updateMetadata' };\r\n  const username = 'v@makeomatic.ru';\r\n  const audience = '*.localhost';\r\n  const extra = 'extra.localhost';\r\n\r\n  beforeEach(global.startService);\r\n  afterEach(global.clearRedis);\r\n\r\n  beforeEach(function pretest() {\r\n    return this.users.router({ username, password: '123', audience }, { routingKey: 'users.register' });\r\n  });\r\n\r\n  it('must reject updating metadata on a non-existing user', function test() {\r\n    return this.users.router({ username: 'ok google', audience, metadata: { $remove: ['test'] } }, headers)\r\n      .reflect()\r\n      .then(inspectPromise(false))\r\n      .then(getMetadata => {\r\n        expect(getMetadata.name).to.be.eq('HttpStatusError');\r\n        expect(getMetadata.statusCode).to.be.eq(404);\r\n      });\r\n  });\r\n\r\n  it('must be able to add metadata for a single audience of an existing user', function test() {\r\n    return this.users.router({ username, audience, metadata: { $set: { x: 10 } } }, headers)\r\n      .reflect()\r\n      .then(inspectPromise());\r\n  });\r\n\r\n  it('must be able to remove metadata for a single audience of an existing user', function test() {\r\n    return this.users\r\n      .router({ username, audience, metadata: { $remove: ['x'] } }, headers)\r\n      .reflect()\r\n      .then(inspectPromise())\r\n      .then(data => {\r\n        expect(data.$remove).to.be.eq(0);\r\n      });\r\n  });\r\n\r\n  it('rejects on mismatch of audience & metadata arrays', function test() {\r\n    return this.users\r\n      .router({\r\n        username, audience: [audience],\r\n        metadata: [{ $set: { x: 10 } }, { $remove: ['x'] }],\r\n      }, headers)\r\n      .reflect()\r\n      .then(inspectPromise(false));\r\n  });\r\n\r\n  it('must be able to perform batch operations for multiple audiences of an existing user', function test() {\r\n    return this.users\r\n      .router({\r\n        username,\r\n        audience: [\r\n          audience,\r\n          extra,\r\n        ],\r\n        metadata: [\r\n          {\r\n            $set: {\r\n              x: 10,\r\n            },\r\n            $incr: {\r\n              b: 2,\r\n            },\r\n          },\r\n          {\r\n            $incr: {\r\n              b: 3,\r\n            },\r\n          },\r\n        ],\r\n      }, headers)\r\n      .reflect()\r\n      .then(inspectPromise())\r\n      .then(data => {\r\n        const [mainData, extraData] = data;\r\n\r\n        expect(mainData.$set).to.be.eq('OK');\r\n        expect(mainData.$incr.b).to.be.eq(2);\r\n        expect(extraData.$incr.b).to.be.eq(3);\r\n      });\r\n  });\r\n\r\n  it('must be able to run dynamic scripts', function test() {\r\n    return this.users.router({ username, audience: [audience, extra], script: {\r\n      balance: {\r\n        lua: 'return {KEYS[1],KEYS[2],ARGV[1]}',\r\n        argv: ['nom-nom'],\r\n      },\r\n    } }, headers)\r\n    .reflect()\r\n    .then(inspectPromise())\r\n    .then(data => {\r\n      expect(data.balance).to.be.deep.eq([\r\n        `{ms-users}v@makeomatic.ru!metadata!${audience}`,\r\n        `{ms-users}v@makeomatic.ru!metadata!${extra}`,\r\n        'nom-nom',\r\n      ]);\r\n    });\r\n  });\r\n});\r\n"]}