{"version":3,"sources":["adapter.js"],"names":[],"mappings":"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","file":"adapter-compiled.js","sourcesContent":["/**\n * Created by Stainwoortsel on 30.05.2016.\n */\nconst RedisStorage = require('./redisstorage');\nconst Errors = require('common-errors');\n\nclass Users{\n  constructor(adapter){\n\n    this.adapter = adapter;\n\n/*\n    let opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    // init configuration\n    const config = this._config = _extends({}, defaultOpts, opts);\n\n    // setup hooks\n    forOwn(config.hooks, (_hooks, eventName) => {\n      const hooks = Array.isArray(_hooks) ? _hooks : [_hooks];\n      each(hooks, hook => this.on(eventName, hook));\n    });\n*/\n\n  }\n\n  /**\n   * Initialize connection\n   * @return {Promise}\n   */\n  connect(){\n    // ????\n  }\n\n  /**\n   * Close connection\n   * return {Promise}\n   */\n  close(){\n    // ????\n  }\n\n\n  /**\n   * Lock user\n   * @param username\n   * @param reason\n   * @param whom\n   * @param remoteip\n   * @returns {Redis}\n   */\n  lockUser({ username, reason, whom, remoteip }){\n    return this.adapter.lockUser({ username, reason, whom, remoteip });\n  }\n\n  /**\n   * Unlock user\n   * @param username\n   * @returns {Redis}\n   */\n  unlockUser(username){\n    return this.adapter.unlockUser(username);\n  }\n\n  /**\n   * Check existance of user\n   * @param username\n   * @returns {Redis}\n   */\n  isExists(username){\n    return this.adapter.isExists(username);\n  }\n\n  isAliasExists(alias, thunk){\n    return this.adapter.isAliasExists(alias, thunk);\n  }\n\n  /**\n   * User is public\n   * @param username\n   * @param audience\n   * @returns {function()}\n   */\n  isPublic(username, audience) {\n    return this.adapter.isPublic(username, audience);\n  }\n\n  /**\n   * Check that user is active\n   * @param data\n   * @returns {boolean}\n   */\n  isActive(data){\n    return this.adapter.isActive(data);\n  }\n\n  /**\n   * Check that user is banned\n   * @param data\n   * @returns {Promise}\n   */\n  isBanned(data){\n    return this.adapter.isBanned(data);\n  }\n\n  /**\n   * Activate user account\n   * @param user\n   * @returns {Redis}\n   */\n  activateAccount(user){\n    return this.adapter.activateAccount(user);\n  }\n\n  /**\n   * Get user internal data\n   * @param username\n   * @returns {Object}\n   */\n  getUser(username){\n    return this.adapter.getUser(username);\n  }\n\n  /**\n   * Get users metadata by username and audience\n   * @param username\n   * @param audience\n   * @returns {Object}\n   */\n\n  getMetadata(username, _audiences, fields = {}) {\n    return this.adapter.getMetadata(username, _audiences, fields);\n  }\n\n\n  /**\n   * Return the list of users by specified params\n   * @param opts\n   * @returns {Array}\n   */\n  getList(opts){\n    return this.adapter.getList(opts);\n  }\n\n  /**\n   * Check existence of alias\n   * @param data\n   * @returns {boolean}\n   */\n  isAliasAssigned(data){\n    return this.adapter.isAliasAssigned(data);\n  }\n\n  /**\n   * Check that user is admin\n   * @param meta\n   * @returns {boolean}\n   */\n  isAdmin(meta){\n    return this.adapter.isAdmin(meta);\n  }\n\n  /**\n   * Make the linkage between username and alias into the USERS_ALIAS_TO_LOGIN\n   * @param username\n   * @param alias\n   * @returns {Redis}\n   */\n  storeAlias(username, alias){\n    return this.adapter.storeAlias(username, alias);\n  }\n\n  /**\n   * Assign alias to the user record, marked by username\n   * @param username\n   * @param alias\n   * @returns {Redis}\n   */\n  assignAlias(username, alias){\n    return this.adapter.assignAlias(username, alias);\n  }\n\n  get remoteipKey(){\n    return this.adapter.remoteipKey;\n  }\n\n  set remoteipKey(val){\n    this.adapter.remoteipKey = val;\n  }\n\n  generateipKey(username, remoteip){\n    return this.adapter.generateipKey(username, remoteip);\n  }\n\n  get loginAttempts(){\n    return this.adapter.loginAttempts;\n  }\n\n  set loginAttempts(val){\n    this.adapter.loginAttempts = val;\n  }\n\n  get options(){\n    return this.adapter.options;\n  }\n\n  set options(opts){\n    this.adapter.options = opts;\n  }\n\n  dropAttempts(){\n    return this.adapter.dropAttempts();\n  }\n\n  checkLoginAttempts(data) {\n    return this.adapter.checkLoginAttempts(data);\n  }\n\n  /**\n   * Set user password\n   * @param username\n   * @param hash\n   * @returns {Redis}\n   */\n  setPassword(username, hash){\n    return this.adapter.setPassword(username, hash);\n  }\n\n  /**\n   * Reset the lock by IP\n   * @param username\n   * @param ip\n   * @returns {Redis}\n   */\n  resetIPLock(username, ip){\n    return this.adapter.resetIPLock(username, ip);\n  }\n\n  /**\n   *\n   * @param username\n   * @param audience\n   * @param metadata\n   * @returns {Object}\n   */\n  updateMetadata({username, audience, metadata}) {\n    return this.adapter.updateMetadata({username, audience, metadata});\n  }\n\n  /**\n   * Removing user by username (and data?)\n   * @param username\n   * @param data\n   * @returns {Redis}\n   */\n  removeUser(username, data){\n    return this.adapter.removeUser(username, data);\n  }\n\n  /**\n   * Verify ip limits\n   * @param  {redisCluster} redis\n   * @param  {Object} registrationLimits\n   * @param  {String} ipaddress\n   * @return {Function}\n   */\n  checkLimits(registrationLimits, ipaddress) {\n    return this.adapter.checkLimits(registrationLimits, ipaddress);\n  }\n\n  /**\n   * Creates user with a given hash\n   * @param redis\n   * @param username\n   * @param activate\n   * @param deleteInactiveAccounts\n   * @param userDataKey\n   * @returns {Function}\n   */\n  createUser(username, activate, deleteInactiveAccounts) {\n    return this.adapter.createUser(username, activate, deleteInactiveAccounts);\n  }\n\n  /**\n   * Performs captcha check, returns thukn\n   * @param  {String} username\n   * @param  {String} captcha\n   * @param  {Object} captchaConfig\n   * @return {Function}\n   */\n  checkCaptcha(username, captcha) {\n    return this.adapter.checkCaptcha(username, captcha);\n  }\n\n  /**\n   * Stores username to the index set\n   * @param username\n   * @returns {Redis}\n   */\n  storeUsername(username){\n    return this.adapter.storeUsername(username);\n  }\n\n  /**\n   * Running a custom script or query\n   * @param script\n   * @returns {*|Promise}\n     */\n\n  customScript(script){\n    return this.adapter.customScript(script);\n  }\n\n  /**\n   * The error wrapper for the front-level HTTP output\n   * @param e\n   */\n  static mapErrors(e){\n    const err = new Errors.HttpStatusError(e.status_code || 500 , e.message);\n    if(err.status_code >= 500) {\n      err.message = Errors.HttpStatusError.message_map[500]; //hide the real error from the user\n    }\n  }\n\n}\n\nmodule.exports =  function modelCreator(){\n  return new Users(RedisStorage);\n};\n\n\n/*\n ВОПРОСЫ:\n Не превращается ли адаптер в полноценную модель?\n Что делать с промисами? Правильно ли частично их пихать в адаптер (по идее, соединение -- ресурс, так что да)?\n Архитектура MServices, где берется redis?\n Оставить Errors снаружи?\n\n+  ЭМИТТЕР НЕ НУЖЕН\n+  МОЖНО СДЕЛАТЬ ХУКИ, но только если нужно\n~  ЭРРОРЫ НАДО ВЫНЕСТИ НАРУЖУ с сообщениями, а внутри генерить женерик-эрроры с кодами, врапить их в экшне в HTTPошикби\n sandbox/activate.js -> Если это модель, то оствлять ли всякие verifyToken, emailVerification и хуки снаружи?\n  СНАРУЖИ\n+ sandbox/alias.js -> 18, 25 (запихнуть их в User?) не надо, все верно\n sandbox/getMetadata -> волевым решением, логика Metadata вместе с промисами запихнута в метод getMetadata. С точки зрения абстракции всё соблюдено, но правильно ли это для текущей ситуации?\n  ДА, МОЖНО\n  но надо сделать разницу между трансформатором данных\n  и селектором\n  плюс вытянуть свежую репу\n sandbox/list -> метод getList настолько широк, что поглатил в себя всю реализацию этого экшна. разве это хорошо?\n  ВСЕ ОК, дефолты можно вытащить наружу. подумать над общим форматом ответа и соотв-но вытащить кое что в методы сторожа\n sandbox/login -> 25, передаем options в адаптер... что-то не в порядке в королевстве Датском!\n  МЕНЯЕМ логику работы промисов. чтобы не городить нерабочий огород в адаптере\n\n redisstorage -> 394 this.log. раньше this брался из экшна, к чему относится метод log?\n redisstorage -> 148,157 оборачивать ли эти методы? эти статусы потенциально зависят от адаптера, но должны выводить значение в чистом виде. С другой стороны, в чистом виде значение не используется, а используется промис\n  ЛОГИЧНЕЕ будет сформить метод с промисом и кидаться ошибками на верхний уровень, собстна в sql логика будет та же\n  нафига нужны просто флаги -- не понятно\n redisstorage -> 105 что на счет методов с thunk'ом?\n  ПОСМОТРЕТЬ что делает thunk и где он участвует, вожможно придется оставить\n\n bluebird: tap\n\n ПОСМОТРЕТЬ levelDB и схожие адаптеры для работы с логикой\n\n МОЖНО в адаптере сделать трансмиттер ошибок адаптера в ошибки HTTP\n\n */\n"]}