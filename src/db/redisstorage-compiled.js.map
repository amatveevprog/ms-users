{"version":3,"sources":["redisstorage.js"],"names":[],"mappings":"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","file":"redisstorage-compiled.js","sourcesContent":["/**\n * Created by Stainwoortsel on 30.05.2016.\n */\nconst Promise = require('bluebird');\nconst Errors = require('common-errors');\nconst mapValues = require('lodash/mapValues');\nconst defaults = require('lodash/defaults');\nconst get = require('lodash/get');\nconst pick = require('lodash/pick');\nconst request = require('request-promise');\nconst uuid = require('node-uuid');\nconst fsort = require('redis-filtered-sort');\nconst fmt = require('util').format;\nconst is = require('is');\nconst sha256 = require('./sha256.js');\nconst moment = require('moment');\n\nconst stringify = JSON.stringify.bind(JSON);\nconst {\n  USERS_DATA, USERS_METADATA, USERS_ALIAS_TO_LOGIN,\n  USERS_BANNED_FLAG, USERS_TOKENS, USERS_BANNED_DATA,\n  USERS_ACTIVE_FLAG, USERS_INDEX, USERS_PUBLIC_INDEX,\n  USERS_ALIAS_FIELD\n} = require('../constants.js');\n\nconst { redis, captcha: captchaConfig, config } = this;\nconst { jwt: { lockAfterAttempts, defaultAudience } } = config;\n\n\n/**\n * Generate hash key string\n * @param args\n * @returns {string}\n */\nconst generateKey = (...args) => {\n  const SEPARATOR = '!';\n  return args.join(SEPARATOR);\n};\n\nmodule.exports = {\n  /**\n   * Lock user\n   * @param username\n   * @param reason\n   * @param whom\n   * @param remoteip\n   * @returns {*|{arity, flags, keyStart, keyStop, step}|Array|{index: number, input: string}}\n   */\n  lockUser({ username, reason, whom, remoteip }){\n    const data = {\n      banned: true,\n      [USERS_BANNED_DATA]: {\n        reason,\n        whom,\n        remoteip\n      }\n    };\n\n    return redis\n      .pipeline()\n      .hset(generateKey(username, USERS_DATA), USERS_BANNED_FLAG, 'true')\n      // set .banned on metadata for filtering & sorting users by that field\n      .hmset(generateKey(username, USERS_METADATA, defaultAudience), mapValues(data, stringify))\n      .del(generateKey(username, USERS_TOKENS))\n      .exec();\n  },\n\n  /**\n   * Unlock user\n   * @param username\n   * @returns {*|{arity, flags, keyStart, keyStop, step}|Array|{index: number, input: string}}\n   */\n  unlockUser({username}){\n    return redis\n      .pipeline()\n      .hdel(generateKey(username, USERS_DATA), USERS_BANNED_FLAG)\n      // remove .banned on metadata for filtering & sorting users by that field\n      .hdel(generateKey(username, USERS_METADATA, defaultAudience), 'banned', USERS_BANNED_DATA)\n      .exec();\n\n  },\n\n  /**\n   * Check existance of user\n   * @param username\n   * @returns {Redis}\n   */\n  isExists(username){\n    return redis\n      .pipeline()\n      .hget(USERS_ALIAS_TO_LOGIN, username)\n      .exists(generateKey(username, USERS_DATA))\n      .exec()\n      .spread((alias, exists) => {\n        if (alias[1]) {\n          return alias[1];\n        }\n\n        if (!exists[1]) {\n          throw new Errors.HttpStatusError(404, `\"${username}\" does not exists`);\n        }\n\n        return username;\n      });\n  },\n\n  isAliasExists(alias, thunk){\n    function resolveAlias(alias) {\n      return redis\n        .hget(USERS_ALIAS_TO_LOGIN, alias)\n        .then(username => {\n          if (username) {\n            throw new Errors.HttpStatusError(409, `\"${alias}\" already exists`);\n          }\n\n          return username;\n        });\n    }\n    if (thunk) {\n      return function resolveAliasThunk() {\n        return resolveAlias(alias);\n      };\n    }\n\n    return resolveAlias(alias);\n  },\n\n  /**\n   * User is public\n   * @param username\n   * @param audience\n   * @returns {function()}\n     */\n  isPublic(username, audience) {\n    return metadata => {\n      if (get(metadata, [audience, USERS_ALIAS_FIELD]) === username) {\n        return;\n      }\n\n      throw new Errors.HttpStatusError(404, 'username was not found');\n    };\n  },\n\n\n  /**\n   * Check that user is active\n   * @param data\n   * @returns {Promise}\n   */\n  isActive(data){\n    if (String(data[USERS_ACTIVE_FLAG]) !== 'true') {\n      return Promise.reject(new Errors.HttpStatusError(412, 'Account hasn\\'t been activated'));\n    }\n\n    return Promise.resolve(data);\n  },\n\n  /**\n   * Check that user is banned\n   * @param data\n   * @returns {Promise}\n   */\n  isBanned(data){\n    if(String(data[USERS_BANNED_FLAG]) === 'true') {\n      return Promise.reject(new Errors.HttpStatusError(423, 'Account has been locked'));\n    }\n\n    return Promise.resolve(data);\n  },\n\n  /**\n   * Activate user account\n   * @param user\n   * @returns {Redis}\n   */\n  activateAccount(user){\n    const userKey = generateKey(user, USERS_DATA);\n\n    // WARNING: `persist` is very important, otherwise we will lose user's information in 30 days\n    // set to active & persist\n    return redis\n      .pipeline()\n      .hget(userKey, USERS_ACTIVE_FLAG)\n      .hset(userKey, USERS_ACTIVE_FLAG, 'true')\n      .persist(userKey)\n      .sadd(USERS_INDEX, user)\n      .exec()\n      .spread(function pipeResponse(isActive) {\n        const status = isActive[1];\n        if (status === 'true') {\n          throw new Errors.HttpStatusError(417, `Account ${user} was already activated`);\n        }\n      });\n  },\n\n  /**\n   * Get user internal data\n   * @param username\n   * @returns {Object}\n   */\n  getUser(username){\n    const userKey = generateKey(username, USERS_DATA);\n\n    return redis\n      .pipeline()\n      .hget(USERS_ALIAS_TO_LOGIN, username)\n      .exists(userKey)\n      .hgetallBuffer(userKey)\n      .exec()\n      .spread((aliasToUsername, exists, data) => {\n        if (aliasToUsername[1]) {\n          return  this.getUser(aliasToUsername[1]);\n        }\n\n        if (!exists[1]) {\n          throw new Errors.HttpStatusError(404, `\"${username}\" does not exists`);\n        }\n\n        return { ...data[1], username };\n      });\n  },\n\n  /**\n   * Get users metadata by username and audience\n   * @param username\n   * @param audience\n   * @returns {Object}\n     */\n\n  // getMetadata(username, audience){\n  //   return redis.hgetallBuffer(generateKey(username, USERS_METADATA, audience));\n  // },\n\n  getMetadata(username, _audiences, fields = {}) {\n    const audiences = Array.isArray(_audiences) ? _audiences : [_audiences];\n\n    return Promise.map(audiences, audience => {\n      return redis.hgetallBuffer(generateKey(username, USERS_METADATA, audience));\n    })\n      .then(function remapAudienceData(data) {\n        const output = {};\n        audiences.forEach(function transform(aud, idx) {\n          const datum = data[idx];\n\n          if (datum) {\n            const pickFields = fields[aud];\n            output[aud] = mapValues(datum, JSONParse);\n            if (pickFields) {\n              output[aud] = pick(output[aud], pickFields);\n            }\n          } else {\n            output[aud] = {};\n          }\n        });\n\n        return output;\n      });\n  },\n\n\n  /**\n   * Return the list of users by specified params\n   * @param opts\n   * @returns {Array}\n   */\n  getList(opts){\n    const { criteria, audience, filter, index, strFilter, order, offset, limit } = opts;\n    const metaKey = generateKey('*', USERS_METADATA, audience);\n\n    return redis\n      .fsort(index, metaKey, criteria, order, strFilter, offset, limit)\n      .then(ids => {\n        const length = +ids.pop();\n        if (length === 0 || ids.length === 0) {\n          return [\n            ids || [],\n            [],\n            length,\n          ];\n        }\n\n        const pipeline = redis.pipeline();\n        ids.forEach(id => {\n          pipeline.hgetallBuffer(redisKey(id, USERS_METADATA, audience));\n        });\n        return Promise.all([\n          ids,\n          pipeline.exec(),\n          length,\n        ]);\n      })\n      .spread((ids, props, length) => {\n        const users = ids.map(function remapData(id, idx) {\n          const data = props[idx][1];\n          const account = {\n            id,\n            metadata: {\n              [audience]: data ? mapValues(data, JSONParse) : {},\n            },\n          };\n\n          return account;\n        });\n\n        return {\n          users,\n          cursor: offset + limit,\n          page: Math.floor(offset / limit + 1),\n          pages: Math.ceil(length / limit),\n        };\n      });\n  },\n\n  /**\n   * Check existence of alias\n   * @param data\n   * @returns {boolean}\n   */\n  isAliasAssigned(data){\n    return data[USERS_ALIAS_FIELD] !== undefined; // was just `data[USERS_ALIAS_FIELD]`\n  },\n\n  /**\n   * Check that user is admin\n   * @param meta\n   * @returns {boolean}\n  */\n  isAdmin(meta){\n    const audience = config.jwt.defaultAudience;\n    return(meta[audience].roles || []).indexOf(USERS_ADMIN_ROLE) >= 0;\n  },\n\n  /**\n   * Make the linkage between username and alias into the USERS_ALIAS_TO_LOGIN\n   * @param username\n   * @param alias\n   * @returns {Redis}\n     */\n  storeAlias(username, alias){\n    return redis.hsetnx(USERS_ALIAS_TO_LOGIN, alias, username);\n  },\n\n  /**\n   * Assign alias to the user record, marked by username\n   * @param username\n   * @param alias\n   * @returns {Redis}\n     */\n  assignAlias(username, alias){\n    return redis\n      .pipeline()\n      .sadd(USERS_PUBLIC_INDEX, username)\n      .hset(generateKey(username, USERS_DATA), USERS_ALIAS_FIELD, alias)\n      .hset(generateKey(username, USERS_METADATA, defaultAudience), USERS_ALIAS_FIELD, stringify)\n      .exec();\n  },\n\n  _remoteipKey: '',\n  get remoteipKey(){\n    return this._remoteipKey;\n  },\n\n  set remoteipKey(val){\n    this._remoteipKey = val;\n  },\n\n  generateipKey(username, remoteip){\n    return this._remoteipKey = generateKey(username, 'ip', remoteip);\n  },\n\n  _loginAttempts: 0,\n  get loginAttempts(){\n    return this._loginAttempts;\n  },\n  set loginAttempts(val){\n    this._loginAttempts = val;\n  },\n\n  _options: {},\n  get options(){\n    return this._options;\n  },\n\n  set options(opts){\n    this._options = opts;\n  },\n\n  dropAttempts(){\n    this._loginAttempts = 0;\n    return redis.del(this.key);\n  },\n  checkLoginAttempts(data) {\n    const pipeline = redis.pipeline();\n    const username = data.username;\n    const remoteipKey = this.generateipKey(username, this._options.remoteip);\n\n    pipeline.incrby(remoteipKey, 1);\n    if (config.jwt.keepLoginAttempts > 0) {\n      pipeline.expire(remoteipKey, config.jwt.keepLoginAttempts);\n    }\n\n    return pipeline\n      .exec()\n      .spread(function incremented(incrementValue) {\n        const err = incrementValue[0];\n        if (err) {\n          this.log.error('Redis error:', err);\n          return;\n        }\n\n        this.loginAttempts = incrementValue[1];\n        if (this.loginAttempts > lockAfterAttempts) {\n          const duration = moment().add(config.jwt.keepLoginAttempts, 'seconds').toNow(true);\n          const msg = `You are locked from making login attempts for the next ${duration}`;\n          throw new Errors.HttpStatusError(429, msg);\n        }\n      });\n  },\n\n  /**\n   * Set user password\n   * @param username\n   * @param hash\n   * @returns {Redis}\n     */\n  setPassword(username, hash){\n    return redis\n      .hset(generateKey(username, USERS_DATA), 'password', hash)\n      .return(username);\n  },\n\n  /**\n   * Reset the lock by IP\n   * @param username\n   * @param ip\n   * @returns {Redis}\n     */\n  resetIPLock(username, ip){\n    return redis.del(generateKey(username, 'ip', ip));\n  },\n\n  /**\n   *\n   * @param username\n   * @param audience\n   * @param metadata\n   * @returns {Object}\n     */\n  updateMetadata({ username, audience, metadata, script }) {\n    const audiences = is.array(audience) ? audience : [audience];\n\n    // keys\n    const keys = audiences.map(aud => redisKey(username, USERS_METADATA, aud));\n\n    // if we have meta, then we can\n    if (metadata) {\n      const pipe = redis.pipeline();\n      const metaOps = is.array(metadata) ? metadata : [metadata];\n      const operations = metaOps.map((meta, idx) => handleAudience(pipe, keys[idx], meta));\n      return pipe.exec().then(res => mapMetaResponse(operations, res));\n    }\n\n    //or...\n    return this.customScript(script)\n  },\n\n  /**\n   * Removing user by username (and data?)\n   * @param username\n   * @param data\n   * @returns {*|{arity, flags, keyStart, keyStop, step}|Array|{index: number, input: string}}\n     */\n  removeUser(username, data){\n    const audience = config.jwt.defaultAudience;\n    const transaction = redis.multi();\n    const alias = data[USERS_ALIAS_FIELD];\n    if (alias) {\n      transaction.hdel(USERS_ALIAS_TO_LOGIN, alias);\n    }\n\n    // clean indices\n    transaction.srem(USERS_PUBLIC_INDEX, username);\n    transaction.srem(USERS_INDEX, username);\n\n    // remove metadata & internal data\n    transaction.del(generateKey(username, USERS_DATA));\n    transaction.del(generateKey(username, USERS_METADATA, audience));\n\n    // remove auth tokens\n    transaction.del(generateKey(username, USERS_TOKENS));\n\n    // complete it\n    return transaction.exec();\n  },\n\n  /**\n   * Verify ip limits\n   * @param  {redisCluster} redis\n   * @param  {Object} registrationLimits\n   * @param  {String} ipaddress\n   * @return {Function}\n   */\n  checkLimits(registrationLimits, ipaddress) {\n    const {ip: {time, times}} = registrationLimits;\n    const ipaddressLimitKey = generateKey('reg-limit', ipaddress);\n    const now = Date.now();\n    const old = now - time;\n\n    return function iplimits() {\n      return redis\n        .pipeline()\n        .zadd(ipaddressLimitKey, now, uuid.v4())\n        .pexpire(ipaddressLimitKey, time)\n        .zremrangebyscore(ipaddressLimitKey, '-inf', old)\n        .zcard(ipaddressLimitKey)\n        .exec()\n        .then(props => {\n          const cardinality = props[3][1];\n          if (cardinality > times) {\n            const msg = 'You can\\'t register more users from your ipaddress now';\n            throw new Errors.HttpStatusError(429, msg);\n          }\n        });\n    }\n  },\n\n  /**\n   * Creates user with a given hash\n   * @param redis\n   * @param username\n   * @param activate\n   * @param deleteInactiveAccounts\n   * @param userDataKey\n   * @returns {Function}\n   */\n  createUser(username, activate, deleteInactiveAccounts) {\n    /**\n     * Input from scrypt.hash\n     */\n    const userDataKey = generateKey(username, USERS_DATA);\n\n    return function create(hash) {\n      const pipeline = redis.pipeline();\n\n      pipeline.hsetnx(userDataKey, 'password', hash);\n      pipeline.hsetnx(userDataKey, USERS_ACTIVE_FLAG, activate);\n\n      return pipeline\n        .exec()\n        .spread(function insertedUserData(passwordSetResponse) {\n          if (passwordSetResponse[1] === 0) {\n            throw new Errors.HttpStatusError(412, `User \"${username}\" already exists`);\n          }\n\n          if (!activate && deleteInactiveAccounts >= 0) {\n            // WARNING: IF USER IS NOT VERIFIED WITHIN <deleteInactiveAccounts>\n            // [by default 30] DAYS - IT WILL BE REMOVED FROM DATABASE\n            return redis.expire(userDataKey, deleteInactiveAccounts);\n          }\n\n          return null;\n        });\n    };\n  },\n\n  /**\n   * Performs captcha check, returns thukn\n   * @param  {String} username\n   * @param  {String} captcha\n   * @param  {Object} captchaConfig\n   * @return {Function}\n   */\n  checkCaptcha(username, captcha) {\n    const {secret, ttl, uri} = captchaConfig;\n    return function checkCaptcha() {\n      const captchaCacheKey = captcha.response;\n      return redis\n        .pipeline()\n        .set(captchaCacheKey, username, 'EX', ttl, 'NX')\n        .get(captchaCacheKey)\n        .exec()\n        .spread(function captchaCacheResponse(setResponse, getResponse) {\n          if (getResponse[1] !== username) {\n            const msg = 'Captcha challenge you\\'ve solved can not be used, please complete it again';\n            throw new Errors.HttpStatusError(412, msg);\n          }\n        })\n        .then(function verifyGoogleCaptcha() {\n          return request\n            .post({uri, qs: defaults(captcha, {secret}), json: true})\n            .then(function captchaSuccess(body) {\n              if (!body.success) {\n                return Promise.reject({statusCode: 200, error: body});\n              }\n\n              return true;\n            })\n            .catch(function captchaError(err) {\n              const errData = JSON.stringify(pick(err, ['statusCode', 'error']));\n              throw new Errors.HttpStatusError(412, fmt('Captcha response: %s', errData));\n            });\n        });\n    };\n  },\n\n  /**\n   * Stores username to the index set\n   * @param username\n   * @returns {Redis}\n   */\n  storeUsername(username){\n    return redis.sadd(USERS_INDEX, username);\n  },\n\n  /**\n   * Execute custom script on LUA\n   * @param script\n   * @returns {Promise}\n   */\n  customScript(script){\n    // dynamic scripts\n    const $scriptKeys = Object.keys(script);\n    const scripts = $scriptKeys.map(scriptName => {\n      const { lua, argv = [] } = script[scriptName];\n      const sha = sha256(lua);\n      const name = `ms_users_${sha}`;\n      if (!is.fn(redis[name])) {\n        redis.defineCommand(name, { lua });\n      }\n      return redis[name](keys.length, keys, argv);\n    });\n\n    return Promise.all(scripts).then(res => {\n        const output = {};\n        $scriptKeys.forEach((fieldName, idx) => {\n          output[fieldName] = res[idx];\n        });\n        return output;\n    });\n  },\n\n  handleAudience(key, metadata) {\n    const pipeline = redis.pipeline();\n    const $remove = metadata.$remove;\n    const $removeOps = $remove && $remove.length || 0;\n    if ($removeOps > 0) {\n      pipeline.hdel(key, $remove);\n    }\n\n    const $set = metadata.$set;\n    const $setKeys = $set && Object.keys($set);\n    const $setLength = $setKeys && $setKeys.length || 0;\n    if ($setLength > 0) {\n      pipeline.hmset(key, mapValues($set, stringify));\n    }\n\n    const $incr = metadata.$incr;\n    const $incrFields = $incr && Object.keys($incr);\n    const $incrLength = $incrFields && $incrFields.length || 0;\n    if ($incrLength > 0) {\n      $incrFields.forEach(fieldName => {\n        pipeline.hincrby(key, fieldName, $incr[fieldName]);\n      });\n    }\n\n    return { $removeOps, $setLength, $incrLength, $incrFields };\n  }\n\n\n};\n"]}